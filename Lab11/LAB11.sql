/*
SET SERVEROUTPUT ON SIZE UNLIMITED
ALTER SESSION SET NLS_LANGUAGE= 'AMERICAN';

select * from A;
select * from AUDITORIUM_TYPE;
*/
--1

declare
    cursorA AUDITORIUM_TYPE%rowtype;
begin
    select * into cursorA from AUDITORIUM_TYPE where AUDITORIUM_TYPE.auditorium_type = N'À ';
    DBMS_OUTPUT.PUT_LINE (cursorA.AUDITORIUM_TYPE || ' ' || cursorA.AUDITORIUM_TYPENAME );
end;

--2

declare
    cursorB AUDITORIUM_TYPE%rowtype;
begin
    select * into cursorB from AUDITORIUM_TYPE;
    DBMS_OUTPUT.PUT_LINE (cursorB.AUDITORIUM_TYPE || ' ' || cursorB.AUDITORIUM_TYPENAME );
    exception 
        when others
            then DBMS_OUTPUT.PUT_LINE(SQLERRM);    
end;

--3

declare
    cursorB AUDITORIUM_TYPE%rowtype;
begin
    select * into cursorB from AUDITORIUM_TYPE;
    DBMS_OUTPUT.PUT_LINE (cursorB.AUDITORIUM_TYPE || ' ' || cursorB.AUDITORIUM_TYPENAME );
    exception 
        when TOO_MANY_ROWS 
            then DBMS_OUTPUT.PUT_LINE('RESULT HAS MORE THAN 1 ROW (' || SQLERRM || ')');
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
end;

--4

declare
    cursorC AUDITORIUM_TYPE%rowtype;
begin
    select * into cursorC from AUDITORIUM_TYPE WHERE AUDITORIUM_TYPE =  'À ';
    DBMS_OUTPUT.PUT_LINE (cursorC.AUDITORIUM_TYPE || ' ' || cursorC.AUDITORIUM_TYPENAME );
    exception 
        when NO_DATA_FOUND 
            then DBMS_OUTPUT.PUT_LINE('RESULT HAS NO DATA (' || SQLERRM || ')');
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
end;

-- ATRIBUTES

DECLARE 
    B1 BOOLEAN;
    B2 BOOLEAN;
    B3 BOOLEAN;
    N PLS_INTEGER;
    AUDIT_TYPE_REC AUDITORIUM_TYPE%ROWTYPE;
BEGIN
    SELECT * INTO AUDIT_TYPE_REC FROM AUDITORIUM_TYPE WHERE AUDITORIUM_TYPE = N'À ';
    B1 := SQL%FOUND;
    B2 := SQL%ISOPEN;
    B3 := SQL%NOTFOUND;
    N  := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE(AUDIT_TYPE_REC.AUDITORIUM_TYPE || ' ' || AUDIT_TYPE_REC.AUDITORIUM_TYPENAME);
    
    IF B1 
        THEN DBMS_OUTPUT.PUT_LINE('B1 = TRUE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('B1 = FALSE');
    END IF;
    
    IF B2 
        THEN DBMS_OUTPUT.PUT_LINE('B2 = TRUE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('B2 = FALSE');
    END IF;
    
    IF B3 
        THEN DBMS_OUTPUT.PUT_LINE('B3 = TRUE');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('B3 = FALSE');
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('N = ' || N);
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

--5 UPDATE WITH COMMIT AND ROLLBACK

CREATE TABLE INTABLE (X NUMBER(2) PRIMARY KEY, Y NVARCHAR2(5));
INSERT INTO INTABLE VALUES(1, 'NVARC');
INSERT INTO INTABLE VALUES(2, 'VARC2');
INSERT INTO INTABLE VALUES(3, 'BTS45');
SELECT * FROM INTABLE;

DECLARE 
    INTABLE_CURSOR INTABLE%ROWTYPE;
BEGIN
    UPDATE INTABLE SET Y = 'NVAR2' WHERE X = 1;
    SELECT * INTO INTABLE_CURSOR FROM INTABLE WHERE X = 1;
    DBMS_OUTPUT.PUT_LINE('INTABLE_CURSOR.X = ' || INTABLE_CURSOR.X || ' INTABLE_CURSOR.Y = ' || INTABLE_CURSOR.Y);
    --ROLLBACK;
    COMMIT;  
END;

-- 6
DECLARE 
    INTABLE_CURSOR INTABLE%ROWTYPE;
BEGIN
    UPDATE INTABLE SET X = 2 WHERE X = 1;
    SELECT * INTO INTABLE_CURSOR FROM INTABLE WHERE X = 1;
    DBMS_OUTPUT.PUT_LINE('INTABLE_CURSOR.X = ' || INTABLE_CURSOR.X || ' INTABLE_CURSOR.Y = ' || INTABLE_CURSOR.Y);
    ROLLBACK;
    --COMMIT;
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

--7

DECLARE 
    INTABLE_CURSOR INTABLE%ROWTYPE;
BEGIN
    INSERT INTO INTABLE(X, Y) VALUES (4, 'VVVVV');
    SELECT * INTO INTABLE_CURSOR FROM INTABLE WHERE X = 4;
    DBMS_OUTPUT.PUT_LINE('INTABLE_CURSOR.X = ' || INTABLE_CURSOR.X || ' INTABLE_CURSOR.Y = ' || INTABLE_CURSOR.Y);
    --ROLLBACK;
    COMMIT;  
END;

-- 8
DECLARE 
    INTABLE_CURSOR INTABLE%ROWTYPE;
BEGIN
    INSERT INTO INTABLE(X, Y) VALUES (4, 'VVVVV');
    SELECT * INTO INTABLE_CURSOR FROM INTABLE WHERE X = 4;
    DBMS_OUTPUT.PUT_LINE('INTABLE_CURSOR.X = ' || INTABLE_CURSOR.X || ' INTABLE_CURSOR.Y = ' || INTABLE_CURSOR.Y);
    ROLLBACK;
    --COMMIT;  
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;


--9

DECLARE 
    INTABLE_CURSOR INTABLE%ROWTYPE;
BEGIN
    DELETE INTABLE WHERE X = 4;
    DBMS_OUTPUT.PUT_LINE('SUCCESS DELETE');
    --ROLLBACK;
    COMMIT;  
END;

-- 10
DECLARE 
    INTABLE_CURSOR INTABLE%ROWTYPE;
BEGIN
    DELETE INTABLE WHERE X = 4;
    DBMS_OUTPUT.PUT_LINE('SUCCESS DELETE');
    ROLLBACK;
    --COMMIT;  
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;


--11
SELECT * FROM TEACHER;

DECLARE
    CURSOR CURS_TEACHER IS SELECT TEACHER, TEACHER_NAME, PULPIT FROM TEACHER; 
    N_TEACHER       TEACHER.TEACHER%TYPE;
    N_TEACHER_NAME  TEACHER.TEACHER_NAME%TYPE;
    N_PULPIT        TEACHER.PULPIT%TYPE;
BEGIN
    OPEN CURS_TEACHER;
    DBMS_OUTPUT.PUT_LINE('ROWCOUNT = ' || CURS_TEACHER%ROWCOUNT);
    
    LOOP
        FETCH CURS_TEACHER INTO N_TEACHER, N_TEACHER_NAME, N_PULPIT;
        EXIT WHEN CURS_TEACHER%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(' ' || CURS_TEACHER%ROWCOUNT || ' ' || N_TEACHER || ' ' || N_TEACHER_NAME || ' ' || N_PULPIT);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('ROWCOUNT = ' || CURS_TEACHER%ROWCOUNT);
    CLOSE CURS_TEACHER;
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;



--12
SELECT * FROM SUBJECT;
DECLARE
    CURSOR CURS_SUBJECT IS SELECT SUBJECT, SUBJECT_NAME, PULPIT FROM SUBJECT; 
    REC_SUBJECT SUBJECT%ROWTYPE;
BEGIN
    OPEN CURS_SUBJECT;
    DBMS_OUTPUT.PUT_LINE('ROWCOUNT = ' || CURS_SUBJECT%ROWCOUNT);
    FETCH CURS_SUBJECT INTO REC_SUBJECT; 
    WHILE CURS_SUBJECT%FOUND
    LOOP
        DBMS_OUTPUT.PUT_LINE(' ' || CURS_SUBJECT%ROWCOUNT || ' ' || REC_SUBJECT.SUBJECT || ' ' || REC_SUBJECT.SUBJECT_NAME|| ' ' || REC_SUBJECT.PULPIT);
        FETCH CURS_SUBJECT INTO REC_SUBJECT;        
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('ROWCOUNT = ' || CURS_SUBJECT%ROWCOUNT);
    CLOSE CURS_SUBJECT;
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

--13
SELECT TEACHER.TEACHER_NAME, PULPIT.PULPIT FROM TEACHER JOIN PULPIT ON TEACHER.PULPIT = PULPIT.PULPIT;

DECLARE 
    CURSOR CURS_TEACH_PULP IS SELECT TEACHER.TEACHER_NAME, PULPIT.PULPIT 
                            FROM TEACHER JOIN PULPIT ON TEACHER.PULPIT = PULPIT.PULPIT;
    REC_TEAC_PULP CURS_TEACH_PULP%ROWTYPE;
BEGIN
    FOR REC_TEAC_PULP IN CURS_TEACH_PULP
    LOOP
        DBMS_OUTPUT.PUT_LINE(' ' || CURS_TEACH_PULP%ROWCOUNT || ' ' || REC_TEAC_PULP.TEACHER_NAME || ' ' || REC_TEAC_PULP.PULPIT);
    END LOOP;
    CLOSE CURS_TEACH_PULP;
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;


--14

DECLARE

    CURSOR CURS_AUD_LESS (CAPACITY AUDITORIUM.auditorium%TYPE)
        IS SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
        WHERE AUDITORIUM_CAPACITY < CAPACITY;
    
    CURSOR CURS_AUD_MORE_LESS (CAPACITY1 AUDITORIUM.auditorium%TYPE, CAPACITY2 AUDITORIUM.AUDITORIUM%TYPE)
        IS SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
        WHERE AUDITORIUM_CAPACITY >= CAPACITY1 AND AUDITORIUM_CAPACITY <= CAPACITY2;
        
    CURSOR CURS_AUD_MORE (CAPACITY AUDITORIUM.auditorium%TYPE)
        IS SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
        WHERE AUDITORIUM_CAPACITY > CAPACITY;
        
        AUD_CTY AUDITORIUM%ROWTYPE;        
        AUD AUDITORIUM.AUDITORIUM%TYPE;
        CTY AUDITORIUM.AUDITORIUM_CAPACITY%TYPE;
BEGIN
    OPEN CURS_AUD_LESS(20);
    FETCH CURS_AUD_LESS INTO AUD, CTY;
    DBMS_OUTPUT.PUT_LINE('---------------- LESS(WHILE) -----------------');
    WHILE (CURS_AUD_LESS%FOUND)
    LOOP
        DBMS_OUTPUT.PUT_LINE(' ' || AUD || ' ' || CTY);
        FETCH CURS_AUD_LESS INTO AUD, CTY;
    END LOOP;
    CLOSE CURS_AUD_LESS;
    
    
    OPEN CURS_AUD_MORE_LESS(21, 30);
    DBMS_OUTPUT.PUT_LINE('---------------- LESS_MORE(LOOP) -----------------');
    LOOP
        FETCH CURS_AUD_MORE_LESS INTO AUD, CTY;
        EXIT WHEN CURS_AUD_MORE_LESS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(' ' || AUD || ' ' || CTY);
    END LOOP;
    CLOSE CURS_AUD_MORE_LESS;
 
    OPEN CURS_AUD_MORE_LESS(31, 60);
    DBMS_OUTPUT.PUT_LINE('---------------- LESS_MORE(LOOP) -----------------');
    LOOP
        FETCH CURS_AUD_MORE_LESS INTO AUD, CTY;
        EXIT WHEN CURS_AUD_MORE_LESS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(' ' || AUD || ' ' || CTY);
    END LOOP;
    CLOSE CURS_AUD_MORE_LESS;
 
    OPEN CURS_AUD_MORE_LESS(61, 80);
    DBMS_OUTPUT.PUT_LINE('---------------- LESS_MORE(LOOP) -----------------');
    
    LOOP
        FETCH CURS_AUD_MORE_LESS INTO AUD, CTY;
        EXIT WHEN CURS_AUD_MORE_LESS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(' ' || AUD || ' ' || CTY);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('CURS_AUD_MORE_LESS ROWCOUNT = ' || CURS_AUD_MORE_LESS%ROWCOUNT );
    CLOSE CURS_AUD_MORE_LESS;
    
    
    DBMS_OUTPUT.PUT_LINE('---------------- MORE(FOR) -----------------');
    FOR AUD_CTY IN CURS_AUD_MORE(81)
    LOOP
        DBMS_OUTPUT.PUT_LINE(' ' || AUD_CTY.AUDITORIUM || ' ' || AUD_CTY.AUDITORIUM_CAPACITY);
    END LOOP;
    
END;

--15

variable x refcursor;
declare
type teacher_name is ref cursor return teacher%rowtype;
xcurs teacher_name;
begin
open xcurs for select * from GISCORE1.teacher;
:x :=xcurs;
end;
/
print x;

--16
DECLARE 
    CURSOR CURS_AUT IS SELECT AUDITORIUM_TYPE, 
    CURSOR ( SELECT AUDITORIUM FROM AUDITORIUM AUD WHERE AUT.AUDITORIUM_TYPE = AUD.AUDITORIUM_TYPE)
    FROM AUDITORIUM_TYPE AUT;
    
    CURS_AUD SYS_REFCURSOR;
    AUT auditorium_type.auditorium_type%TYPE;
    TXT VARCHAR2(1000);
    AUD AUDITORIUM.AUDITORIUM%TYPE;
BEGIN
    OPEN CURS_AUT;
    FETCH CURS_AUT INTO AUT, CURS_AUD;
    WHILE(CURS_AUT%FOUND)
    LOOP
        TXT:=RTRIM(AUT) || ':';
        LOOP
            FETCH CURS_AUD INTO AUD;
            EXIT WHEN CURS_AUD%NOTFOUND;
            TXT:= TXT || ',' || RTRIM(AUD);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE(TXT);
        FETCH CURS_AUT INTO AUT, CURS_AUD;
    END LOOP;
    CLOSE CURS_AUT;
    EXCEPTION
        WHEN OTHERS
        THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;


--17
DECLARE
    CURSOR CURS_AUD_MORE_LESS (CAPACITY1 AUDITORIUM.auditorium%TYPE, CAPACITY2 AUDITORIUM.AUDITORIUM%TYPE)
        IS SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
        WHERE AUDITORIUM_CAPACITY >= CAPACITY1 AND AUDITORIUM_CAPACITY <= CAPACITY2 FOR UPDATE;
    AUD_CTY AUDITORIUM%ROWTYPE;
BEGIN
    FOR AUD_CTY IN CURS_AUD_MORE_LESS(40,80)
        LOOP
            UPDATE AUDITORIUM SET AUDITORIUM_CAPACITY = AUD_CTY.AUDITORIUM_CAPACITY*0.9 WHERE CURRENT OF CURS_AUD_MORE_LESS;
            DBMS_OUTPUT.PUT_LINE(' ' || AUD_CTY.AUDITORIUM || ' ' || AUD_CTY.AUDITORIUM_CAPACITY);
        END LOOP;
END;
SELECT * FROM AUDITORIUM;
ROLLBACK;


--18

DECLARE 
    CURSOR CURS_AUD_MORE_LESS (CAPACITY1 AUDITORIUM.auditorium%TYPE, CAPACITY2 AUDITORIUM.AUDITORIUM%TYPE)
        IS SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
        WHERE AUDITORIUM_CAPACITY >= CAPACITY1 AND AUDITORIUM_CAPACITY <= CAPACITY2 FOR UPDATE;
    AUD AUDITORIUM.AUDITORIUM%TYPE;
    CTY AUDITORIUM.AUDITORIUM_CAPACITY%TYPE;
BEGIN
    OPEN CURS_AUD_MORE_LESS(0,20);
    FETCH CURS_AUD_MORE_LESS INTO AUD, CTY;
    WHILE (CURS_AUD_MORE_LESS%FOUND)
    LOOP
        DELETE AUDITORIUM WHERE CURRENT OF CURS_AUD_MORE_LESS;
        FETCH CURS_AUD_MORE_LESS INTO AUD, CTY;
    END LOOP;
    CLOSE CURS_AUD_MORE_LESS;
    FOR PP IN CURS_AUD_MORE_LESS(0, 90)
    LOOP
        DBMS_OUTPUT.PUT_LINE(' ' || PP.AUDITORIUM || PP.AUDITORIUM_CAPACITY);
    END LOOP;
    ROLLBACK;
    EXCEPTION
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
--19

DECLARE 
    CURSOR CURS_AUDITORIUM (CAPACITY AUDITORIUM.AUDITORIUM%TYPE)
        IS SELECT AUDITORIUM, AUDITORIUM_CAPACITY, ROWID
        FROM AUDITORIUM
        WHERE AUDITORIUM_CAPACITY >= CAPACITY FOR UPDATE;
    AUD AUDITORIUM.AUDITORIUM%TYPE;
    CTY AUDITORIUM.AUDITORIUM_CAPACITY%TYPE;
BEGIN
    FOR XXX IN CURS_AUDITORIUM(80)
    LOOP
        CASE
            WHEN XXX.AUDITORIUM_CAPACITY >=90
                THEN DELETE AUDITORIUM WHERE ROWID = XXX.ROWID;
            WHEN XXX.AUDITORIUM_CAPACITY >=80
                THEN UPDATE AUDITORIUM SET AUDITORIUM_CAPACITY = AUDITORIUM_CAPACITY+3 WHERE ROWID = XXX.ROWID;
        END CASE;
    END LOOP;
    FOR YYY IN CURS_AUDITORIUM(80)
    LOOP
        DBMS_OUTPUT.PUT_LINE(' ' || YYY.AUDITORIUM || ' ' || YYY.AUDITORIUM_CAPACITY);
    END LOOP;
    ROLLBACK;
END;

