
CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_INSERT
BEFORE INSERT ON AUDITORIUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_BEFORE_INSERT');    
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_DELETE
BEFORE DELETE ON AUDITORIUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_BEFORE_DELETE');    
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_UPDATE
BEFORE UPDATE ON AUDITORIUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_BEFORE_UPDATE');    
END;
------------------------------------------------------------------
----------------- FOR EACH ROW BEFORE ----------------------------

CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_INSERT_ROW
BEFORE INSERT ON AUDITORIUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_BEFORE_INSERT_ROW');    
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_DELETE_ROW
BEFORE DELETE ON AUDITORIUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_BEFORE_DELETE_ROW');    
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_UPDATE_ROW
BEFORE UPDATE ON AUDITORIUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_BEFORE_UPDATE_ROW');    
END;

------------------------------------------------------------------
-------------------- INSERTING UPDATING DELETING -----------------

CREATE OR REPLACE TRIGGER AUDITORIUM_BEFORE_ALL
BEFORE INSERT OR UPDATE OR DELETE ON AUDITORIUM
FOR EACH ROW
DECLARE 
    STR AUDIT_.DATA_%TYPE;
BEGIN
    STR:= :OLD.AUDITORIUM_CAPACITY || :NEW.AUDITORIUM_CAPACITY;
    IF INSERTING THEN
        INSERT INTO AUDIT_ VALUES(SYSDATE, 'INSERT', 'AUDITORIUM_BEFORE_ALL', STR);
        DBMS_OUTPUT.PUT_LINE('INSERTING_BEFORE_ALL');
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('UPDATING_BEFORE_ALL');
        INSERT INTO AUDIT_ VALUES(SYSDATE, 'UPDATE', 'AUDITORIUM_BEFORE_ALL', STR);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('DELETING_BEFORE_ALL');
        INSERT INTO AUDIT_ VALUES(SYSDATE, 'DELETE', 'AUDITORIUM_BEFORE_ALL', STR);
    END IF;
END;

------------------------------------------------------------------
---------------- AFTER TRIGGERS ----------------------------------
SELECT * FROM AUDITORIUM;

CREATE OR REPLACE TRIGGER AUDITORIUM_AFTER_INSERT
AFTER INSERT ON AUDITORIUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_AFTER_INSERT');
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_AFTER_DELETE
AFTER DELETE ON AUDITORIUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_AFTER_DELETE');
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_AFTER_UPDATE
AFTER UPDATE ON AUDITORIUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_AFTER_UPDATE');
END;
----------------------------------------------------------------------
------------------------FOR EACH ROW-----------------------------------
CREATE OR REPLACE TRIGGER AUDITORIUM_AFTER_INSERT_ROW
AFTER INSERT ON AUDITORIUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_AFTER_INSERT_ROW');
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_AFTER_DELETE_ROW
AFTER DELETE ON AUDITORIUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_AFTER_DELETE_ROW');
END;

CREATE OR REPLACE TRIGGER AUDITORIUM_AFTER_UPDATE_ROW
AFTER UPDATE ON AUDITORIUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('AUDITORIUM_AFTER_UPDATE_ROW');
END;
----------------------------------------------------------------------


INSERT INTO AUDITORIUM VALUES('300-1', '300-1', 10, 'LEWC');
UPDATE AUDITORIUM SET AUDITORIUM.AUDITORIUM_CAPACITY = 5 WHERE AUDITORIUM_CAPACITY = 10;
DELETE AUDITORIUM WHERE AUDITORIUM.AUDITORIUM_CAPACITY = 5;

SELECT * FROM AUDITORIUM;

----------------------------------------------------------------------
--------------------- AUDIT ------------------------------------------
DROP TABLE AUDIT_;
CREATE TABLE AUDIT_ (OPERATION_DATE TIMESTAMP, OPERATION_TYPE VARCHAR2(20), TRIGGER_NAME VARCHAR2(30), DATA_ VARCHAR2(15));
SELECT * FROM AUDIT_;

----------------------------------------------------------------------
------------------------- DROP AUDITOIRUM ----------------------------
CREATE OR REPLACE TRIGGER AUDITORIUM_BLOCK_DROP_TRIGGER
BEFORE DROP ON SCHEMA
BEGIN
    RAISE_APPLICATION_ERROR(-20000, 'DO NOT DROP THIS TABLE ' || ORA_DICT_OBJ_TYPE || ' ' || ORA_DICT_OBJ_NAME);
END;
DROP TRIGGER AUDITORIUM_BLOCK_DROP_TRIGGER;
----------------------------------------------------------------------
------------------------- INSTEAD OF ---------------------------------
DROP VIEW AUDITORIUM_VIEW;
CREATE VIEW AUDITORIUM_VIEW AS
SELECT * FROM AUDITORIUM;

SELECT * FROM AUDITORIUM_VIEW;
CREATE OR REPLACE TRIGGER INSTEAD_OF_TRIGGER
INSTEAD OF INSERT ON AUDITORIUM_VIEW
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('INSERT: INSTEAD_OF_TRIGGER');
    INSERT INTO AUDITORIUM VALUES(:NEW.AUDITORIUM, :NEW.AUDITORIUM_NAME, :NEW.AUDITORIUM_CAPACITY, :NEW.AUDITORIUM_TYPE);
END;
INSERT INTO AUDITORIUM_VIEW VALUES('211-1', '211-1', 28, 'LH');
DELETE AUDITORIUM WHERE AUDITORIUM_CAPACITY = 28;
-------------------------------------------------------------------------------------------- 
CREATE TABLE TB (X NUMBER, Y NUMBER);
CREATE TABLE CC(X NUMBER, Y NUMBER);
DROP TABLE CC;
DROP TABLE TB;
INSERT INTO TB VALUES(1,2);
INSERT INTO TB VALUES(3,2);
INSERT INTO TB VALUES(4,2);
INSERT INTO TB VALUES(2,2);
INSERT INTO TB VALUES(5,2);
SELECT * FROM TB;
SELECT * FROM CC;
DELETE TB WHERE X = 1;


CREATE OR REPLACE TRIGGER TG_TRIG BEFORE DELETE ON TB
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('TG_TRIG');
    INSERT INTO CC VALUES( :OLD.X, :OLD.Y);
END;

CREATE OR REPLACE TRIGGER TG_TRIG BEFORE DELETE ON TB
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('TG_TRIG');
END;